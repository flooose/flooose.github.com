---
title: Getting Started with Jasmine and Backbone-js on rails 3.1
layout: post
published: false
---

Okay, here's the game: I'm going to write a simple log rotation library. It will be able to log any file specified and it will be able to archive them in a specific hierarchy, e.g. archive_dir/year_dir/month_dir/, etc. It will also be able to purge rotated files after a specified time.

The reason I'm doing this is that in search myself as an object-oriented programmer, I've recently read a lot about the subject and I've come up with the following links that I feel could help me best in this pursuit.

I naming this post, "I don't understand object orientation" because I have felt for a long time that my tendencies in programming leaned more towards other programming paradigms, but have gotten very little concrete understanding of how to fix that.

So, here's a small summary and some context about what literature I've read that motivated this post:

It started when I first started programming as an intern at a now defunkt company. I had to write a wrapper for some git commands and found myself for the first time needing to mock and (mostly) stub. I was little confused by the whole thing, especially after I realized that mocking was a pretty controversial subject. Some insisted one should never mock, while the proponents seemed to have very convincing reasons for doing so. Further investigation revealed that the proponents' motivation was feuled by well structured approach to programming that seems to be a sub-paradigm of object oriented programming.

The relevant literature here is the "paper":http://linkto.com that the title of this post references help solidify this and shortly after, as if by cosmic strategy, I bumped into serveral others. First there was "mocks aren't stubs" by Martin Fowler, then I bumped into "stubbing is not enough":http://gmoeck.github.com/2011/10/26/stubbing-is-not-enough.html, which led me to two other articles by the "author's":http://gmoeck.github.com, one on "information hiding":http://gmoeck.github.com/2011/09/28/why-you-should-care-about-information-hiding.html and the other on "encapsulation":http://gmoeck.github.com/2011/09/20/why-you-should-care-about-encapsulation.html.

The article also linked to one last article "Tell, Don't Ask":http://pragprog.com/articles/tell-dont-ask . They're all great articles in my mind and they certainly  continued to reinforce my suspicions about what I was doing wrong, but I was once again stumped about how to rectify my flawed approach to proper object oriented programming.

One thing about the last article stuck with me though and it was simply the open Quote by Alec Sharp, "Procedural code gets information then makes decisions. Object-oriented code tells objects to do things."
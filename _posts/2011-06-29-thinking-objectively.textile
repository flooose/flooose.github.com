---
title: Hands off! An attempt at a mouseless work-flow with Gnu Screen
layout: post
published: false
---
I'm a (junior) Ruby on Rails developer. That means, one, that I work with Rails, and, two, that I program in Ruby, and yes all that at a junior level. Among other things, this indicates taht I work with and in an object oriented environment. Still, I'm completely bewildered by object oriented program design and problem solving.

I've realized this for a while, so I've done my best to come up with simple, but appropriate code exercises to get better at this, to no avail. My most recent such exercise is a simple program whose aim it is to check if my ip address has changed and publish it via a git commit and push when it does change.

I've been planning this project in my head for quite some time, and because I can't come up with the design details, I haven't been able to move forward. The program will obviously be simple: @if ip has changed, update git repository with new ip address, make commit and make push@

This has led me to a design where there would be an @Ip@ class and a @Git@ class. These would be in my 'lib/' directory. There would be an executable in the 'bin/' directory that would run and accomplish the above stated goals by invoking instances of these two classes.

On the one hand, the design seems simple enough, but on the other hand, I get confused about what the @Ip@ class should do. Should it be instantiated with an ip string? Where would that come from (I had envisioned a @Config@ object as a further exercise in this project)? Should it have an ip state based on existing information and update, if the ip address had changed? Should it do the update upon instantiation, or should it do it when an Ip#update method is called?

The @Ip@ class was the first element of this program that I thought of and the @Git@ object has would have just as many open question if it were the first element of the program that I thought of. Furthermore, because I thought of the @Git@ object second, its unknowns are confounded by the @Ip@ unknowns.


************************************
for the time being, I'm convinced that the Ip object should take no parameters upon instantiation. It should create a nil @address instance variable. The update method should fill update set the variable
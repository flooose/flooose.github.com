---
title: Hands off! An attempt at a mouseless work-flow with Gnu Screen
layout: post
---
h2. Hands off! An attempt at a mouseless work-flow with Gnu Screen

p(section-title). What's screen? Why this tutorial?

Screen is a program that brings the idea of windows to the console/terminal. The man page states that 'Screen  is  a full-screen window manager...', but for the purposes of this experiment, it's enough to know that it has the concept of windows and that once started, gnu screen can be disconnected from and reconnnected to at will, with previously running programs left uninterrupted.

Perhaps the most immediate motivation for using screen, is that it can be started remotely, where the previously mentioned features can be taken advantage of to allow one to start long running programs without the risk of having them killed by the system once the network connection with the server is broken.

Here's a sample of what screen session on a remote server might look like:

<div class="code">

bc. [my_computer] $ ssh someserver.com
[their_puter] $ screen
[their_puter] $ rake import:really:huge:db_dump
starting import of 1.5 GB sql dump
 ^A ^D
[detached]
[their_puter] $ exit
Connection to someserver.com closed
[my_computer] $

</div>

...time passes...

<div class="code">

bc. [my_computer] $ ssh someserver.com
[their_puter] $ screen -r
[their_puter] $ rake import:really:huge:db_dump
starting import of 1.5 GB sql dump
finished import of 1.5 GB sql dump. Took 15 hours.
[their_puter] $

</div>

p. The motivation for this experiment came simply after discovering screen and wondering if I could eliminate reaching for the mouse while I'm programing. I don't use the mouse much to begin with and I find that it interrupts my work flow when I do have to reach for it.

p(section-title). Next steps, going beyond the basics.

p. The sample session above is dead simple. I learned it the first day and although it solved a concrete problem for me, it didn't get me far beyond wondering IF it could be used in terms of this experiment. So what's the next step?

p. Well what I mainly do in the terminal is run programs and watch output (e.g. log files). My editor is usually in another window and that can be switched to with @alt + tab@, so if you're running a program in your screen session, then you can't tail a log file at the same time, right?

p(section-title). Windows

This is where screen's ability to manage windows comes in. In screen you can get another window by pressing @^a ^c@. @^a ^n@ and @^a ^p@ can
be used to cycle backward and forward through the windows. On the one hand this does solve the problem of doing two things within one screen
session, but most terminal programs have tabbing capabilities and ways of cycing through those tabs without using the mouse. So does screen
offer anything to sweeten the deal?

Well for starters, a screen window can be split, i.e. two windows are displayed at the same time, meaning that you can input commands on one
side and, for instance, tail that log on the other side.

Pretty sweet. I know that other terminal emulators offer this too, but it's nice to see that screen offers this as well as things that other
terminals don't. The experiment goes on

p(section-title). Some configuration

I discovered something else. Screen is pretty configurable. For instance, you don't really get an overview of your windows as you create them
in screen. This can be a little disorienting as you start getting comfortable using it and start opening more than just one second window.
Luckily I found this config:

bc. $ cat ~/.screenrc
hardstatus alwayslastline
hardstatus string '%{= kG}[ %{G}%H %{g}][%= %{=kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B}%Y-%m-%d %{W}%c %{g}]'
$

This will get you something like this at the bottom of each one of your screen windows

bc. [ (none) ][            0$ bash  1$ bash  2-$ bash  (3*$bash)                 ][2011-03-07 18:16 ]

It's easy to see that this is more or less the equivalent of a console based windows panel. In the middle you see that there art four (bash)
windows and that @(3*$bash)@ is the active one. You even get a clock on the right.

p(section-title). Working with the console output

I mentioned above that I mainly run programs and tail log file in the terminal. At this point I know how to do both at the same time in one
screen session by taking advantage of its windowing functionality, but I quickly realized that this came at a cost: scrolling with the mouse
ceases to work.

This is probably the one thing that I did enjoy doing with the mouse. Scrolling up and down through the terminal with the flip of a finger
is always pretty satisfying for me, so I guess it never really felt like something that affected my work flow. Now that I was without it, it
felt like something was missing.

By pressing @^a ^[@ you enter 'copy' mode in screen, which allows you to navigate the screen content as if it were a vim or emacs buffer,
in fact, you even navigate the buffer with vim key bindings (i.e. h,j,k,l). After navigating to your desired part of the buffer, @space@
activates highlighting. You then navigate to another part of the buffer, press @space@ again, and you've got everything in the highlighted
reqion copied. Now pressing @^a^]@ in any program in any window within your screen session (mutt, ttytter, emacs, vim, etc.) pastes the
content.

Once I overcame the inertia of trying to scroll with the mouse, I actually to took to this part of screen pretty well. It seems sort of
clunky at first, but I quickly took copying stuff form one window to another for granted.

In practice though, I quickly took to it. This was mainly because the shock of not being able to scroll with the ease of a flick of a finger
on the mouse was replaced by some great advantages. For instance, I was able to navigate through the scroll back history with k (aka a vi
navigation), set a mark with the space bar, scroll further back or forward with 'k' or 'j' respectively, and hit the space bar again to copy
the text a buffer that could be pasted into any of the other screen windows, including emacs or vim sessions within these windows.


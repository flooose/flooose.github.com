---
title: Ruby and the meta
layout: post
published: false
---
h2. Ruby and the meta

I've done a lot of reading about ruby metaprogramming (who hasn't?)
and although I feel like I've gotten my head around a lot of it,
without being a developer with a bunch of projects touching on abstract
problems, I haven't found many opportunities to test my knowlege and
see it pan out.

You can only get so much out of reading about metaprogramming and
while reading source code gets you further, it's still not coding.

Indeed, I've found that my understanding of metaprogramming is quite
frail. Furthermore, my inability to come up with good sample projects
that for metaprogramming, shows that I still don't know how to think in
terms of it.

Recently, while reading ":http://yehudakatz.com/2009/11/15/metaprogramming-in-ruby-its-all-about-the-self/"
post by the famous wycats, I had what I believe is the break through
in understanding that's necessary for me to finally come up with good
sample exercise.

I have to say that Yehuda's the post mostly reads
like most other ones that I've read on the subject, but somehow there
was one thing he said that help crystalize this new understanding of
the meta thing.

Three principles of metaprogramming ruby:
1. Everything in ruby is an object. (nothing new)
2. #class_eval is only for Objects of type @Class@
3. When defining a method on an existing object, you're defining the
method on it's metaclass
4. doing:
class Class
  def somemeth
  end
end

does not have the same effect as:

class SomeClass
  def someothermeth
  end
end

in the former, defining the method on Class results in your SomeClass
having the CLASS method somemeth

in the latter, defining the method someothermethod, is an INSTANCE
method of SomeClass, meaning it's only available on new objects created
from SomeClass, i.e. SomeClass.new.someothermeth works, but not
SomeClass.someothermeth

5. All other applications of #instance_eval, class<<blah, self.included,
etc. can be clarified by the above 3 steps.

So let's try this one by one in practice:

H3. Everything in ruby is an object.

This is the easy one. For people who came from some place like Java,
it simply means coming to grips with
